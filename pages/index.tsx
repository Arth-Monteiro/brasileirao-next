import { useState } from 'react'

import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TextField,
} from '@mui/material'
import { LocalizationProvider, DatePicker } from '@mui/x-date-pickers'
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns'

import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
// import Link from 'next/link'

import Header from '../components/Header'
import Loading from '../components/Loading'

import { useApiGetYearData } from '../services/apiService'
import { removeAccent } from '../services/stringService'

// const PageWrapper = styled.div`
//   background-color: lightgrey;
//   min-height: 100%;
// `;

interface ISummary {
  time: string
  pontos: number
  vitorias: number
  empates: number
  derrotas: number
  gpros: number
  gcontras: number
}

const Home: NextPage = () => {
  const [date, setDate] = useState<Date | null>(new Date('2003-01-02'))

  const { data, isLoading, isError } = useApiGetYearData(
    date?.getFullYear().toString() ?? '',
    true
  )

  if (isError) return <div>Error</div>
  else if (isLoading) return <Loading />

  const rows = setRows(data)

  function handleDateChange(newDate: Date | null) {
    if (newDate) setDate(newDate)
  }

  return (
    <>
      <Head>
        <title>Brasileirão</title>
        <meta name="description" content="Generated by create next " />
        <link rel="icon" href="/favicon.ico" />
        {/* <link rel="stylesheet" href="https://rsms.me/inter/inter.css" /> */}
      </Head>

      <Header />

      <main style={{ margin: '30px 0' }}>
        <div style={{ display: 'flex', justifyContent: 'center' }}>
          <LocalizationProvider dateAdapter={AdapterDateFns}>
            <DatePicker
              views={['year']}
              label={'Ano da Tabela'}
              minDate={new Date('2003-01-01T00:00:00')}
              maxDate={new Date('2015-12-31T00:00:00')}
              value={date}
              onChange={handleDateChange}
              renderInput={(params) => (
                <TextField {...params} helperText={null} />
              )}
            />
          </LocalizationProvider>
        </div>

        <TableContainer style={{ margin: '30px 0' }} component={'div'}>
          {/* Begin Calendar Table */}
          <Table aria-label="simple table">
            <TableHead>
              <TableRow>
                <TableCell colSpan={2}></TableCell>
                <TableCell>P</TableCell>
                <TableCell>V</TableCell>
                <TableCell>E</TableCell>
                <TableCell>D</TableCell>
                <TableCell>GP</TableCell>
                <TableCell>GC</TableCell>
                <TableCell>S</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {rows.map((row, index) => {
                return (
                  <TableRow key={index}>
                    <TableCell style={{ textAlign: 'center' }}>
                      {index + 1}
                    </TableCell>
                    <TableCell>
                      <Image
                        src={setImagePath(row.time)}
                        alt={`Escudo do ${row.time}`}
                        width={50}
                        height={50}
                      />
                    </TableCell>
                    <TableCell>{row.pontos}</TableCell>
                    <TableCell>{row.vitorias}</TableCell>
                    <TableCell>{row.empates}</TableCell>
                    <TableCell>{row.derrotas}</TableCell>
                    <TableCell>{row.gpros}</TableCell>
                    <TableCell>{row.gcontras}</TableCell>
                    <TableCell>{row.gpros - row.gcontras}</TableCell>
                  </TableRow>
                )
              })}
            </TableBody>
          </Table>
        </TableContainer>
      </main>

      <footer style={{ display: 'flex', justifyContent: 'center' }}>
        <p>
          Tabela baseada em dados ficticios. Para mais informações:{' '}
          <a
            href="https://github.com/geovannyAvelar/Dados-Abertos-
Campeonato-Brasileiro"
          >
            acesse aqui
          </a>
        </p>
      </footer>
    </>
  )
}

export default Home

const setRows = (data: any) => {
  const matches = data.partidas
  const rows: ISummary[] = []

  for (let i = 0; i < matches.length; i++) {
    const {
      mandante,
      visitante,
      pontuacao_geral_mandante,
      pontuacao_geral_visitante,
    } = matches[i]

    const casa = {
      time: mandante,
      pontos: pontuacao_geral_mandante.total_pontos,
      vitorias: pontuacao_geral_mandante.total_vitorias,
      empates: pontuacao_geral_mandante.total_empates,
      derrotas: pontuacao_geral_mandante.total_derrotas,
      gpros: pontuacao_geral_mandante.total_gols_marcados,
      gcontras: pontuacao_geral_mandante.total_gols_sofridos,
    }

    const visita = {
      time: visitante,
      pontos: pontuacao_geral_visitante.total_pontos,
      vitorias: pontuacao_geral_visitante.total_vitorias,
      empates: pontuacao_geral_visitante.total_empates,
      derrotas: pontuacao_geral_visitante.total_derrotas,
      gpros: pontuacao_geral_visitante.total_gols_marcados,
      gcontras: pontuacao_geral_visitante.total_gols_sofridos,
    }

    rows.push(casa, visita)
  }

  return rows.sort((a, b) => b.pontos - a.pontos)
}

const setImagePath = (time: string) => {
  time = time.split(' ').join('_')
  return `/img/${removeAccent(time.toLowerCase())}.png`
}
